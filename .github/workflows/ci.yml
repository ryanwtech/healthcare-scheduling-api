name: CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run ruff linter
        run: ruff check .
        continue-on-error: false

  type:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run mypy type checker
        run: mypy app
        continue-on-error: false

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: healthcare_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Wait for Redis
        run: |
          until redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 2
          done

      - name: Set up test environment
        run: |
          echo "DATABASE_URL=postgresql+psycopg://postgres:postgres@localhost:5432/healthcare_test" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=60" >> $GITHUB_ENV
          echo "PROMETHEUS_ENABLED=false" >> $GITHUB_ENV
          echo "CELERY_BROKER_URL=redis://localhost:6379/1" >> $GITHUB_ENV
          echo "CELERY_RESULT_BACKEND=redis://localhost:6379/2" >> $GITHUB_ENV
          echo "FIRST_SUPERUSER_EMAIL=admin@test.com" >> $GITHUB_ENV
          echo "FIRST_SUPERUSER_PASSWORD=admin123" >> $GITHUB_ENV

      - name: Run database migrations
        run: |
          alembic upgrade head

      - name: Run unit tests
        run: |
          pytest -m unit --maxfail=1 --disable-warnings -q --cov=app --cov-report=xml
        env:
          DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/healthcare_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          ACCESS_TOKEN_EXPIRE_MINUTES: 60
          PROMETHEUS_ENABLED: false
          CELERY_BROKER_URL: redis://localhost:6379/1
          CELERY_RESULT_BACKEND: redis://localhost:6379/2
          FIRST_SUPERUSER_EMAIL: admin@test.com
          FIRST_SUPERUSER_PASSWORD: admin123

      - name: Run integration tests
        run: |
          pytest -m integration --maxfail=1 --disable-warnings -q --cov=app --cov-append --cov-report=xml
        env:
          DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/healthcare_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          ACCESS_TOKEN_EXPIRE_MINUTES: 60
          PROMETHEUS_ENABLED: false
          CELERY_BROKER_URL: redis://localhost:6379/1
          CELERY_RESULT_BACKEND: redis://localhost:6379/2
          FIRST_SUPERUSER_EMAIL: admin@test.com
          FIRST_SUPERUSER_PASSWORD: admin123

      - name: Run fast e2e tests
        run: |
          pytest -m "e2e and not slow" --maxfail=1 --disable-warnings -q --cov=app --cov-append --cov-report=xml
        env:
          DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/healthcare_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          ACCESS_TOKEN_EXPIRE_MINUTES: 60
          PROMETHEUS_ENABLED: false
          CELERY_BROKER_URL: redis://localhost:6379/1
          CELERY_RESULT_BACKEND: redis://localhost:6379/2
          FIRST_SUPERUSER_EMAIL: admin@test.com
          FIRST_SUPERUSER_PASSWORD: admin123

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, type, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: healthcare-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm healthcare-api:latest python -c "import app.main; print('Docker image works!')"
